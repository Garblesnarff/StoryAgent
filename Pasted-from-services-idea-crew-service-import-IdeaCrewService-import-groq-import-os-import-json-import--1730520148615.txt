from services.idea_crew_service import IdeaCrewService
import groq
import os
import json
import re

class TextGenerator:
    def __init__(self):
        self.client = groq.Groq(api_key=os.environ.get('GROQ_API_KEY'))
        self.idea_crew = IdeaCrewService()
    
    def generate_story(self, prompt, genre, mood, target_audience, paragraphs):
        try:
            # First, generate the story concept using the Idea Crew
            story_concept = self.idea_crew.generate_story_concept(
                prompt, genre, mood, target_audience
            )
            
            # Use the story concept to generate the actual story text
            response = self.client.chat.completions.create(
                model="llama-3.1-70b-versatile",
                messages=[
                    {"role": "system", "content": f"You are a creative storyteller specializing in {genre} stories with a {mood} mood for a {target_audience} audience. Write a story in a natural flowing narrative style."},
                    {"role": "user", "content": f"""
                        Using this story concept:
                        Core Concepts: {story_concept['core_concepts']}
                        Story World: {story_concept['story_world']}
                        Plot: {story_concept['plot_possibilities']}
                        
                        Write a {genre} story with a {mood} mood for a {target_audience} audience. 
                        Write it as {paragraphs} distinct paragraphs, where each paragraph naturally 
                        flows and contains approximately 2-3 sentences. Do not include any segment 
                        markers or labels.
                    """}
                ],
                temperature=0.7,
            )
            
            if not response or not response.choices:
                raise Exception("No response from story generation API")
                
            story = response.choices[0].message.content
            if not story:
                raise Exception("Empty response from story generation API")
            
            # Split and clean paragraphs
            paragraphs_raw = story.split('\n\n')
            story_paragraphs = []
            
            for paragraph in paragraphs_raw:
                cleaned = re.sub(r'^[0-9]+[\.\)]\s*', '', paragraph.strip())
                cleaned = re.sub(r'Segment\s*[0-9]+:?\s*', '', cleaned)
                
                if cleaned:
                    story_paragraphs.append(cleaned)
                    
            return story_paragraphs[:paragraphs]
            
        except Exception as e:
            print(f"Error generating story: {str(e)}")
            return None