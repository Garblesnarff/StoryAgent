import React from 'react';

const AnimatedLoadingWheel = ({ currentParagraph, totalParagraphs, step, message }) => {
  const progress = (currentParagraph - 1) * 20 + (step === 'audio' ? 15 : step === 'image' ? 5 : 0);
  const percentage = Math.min(100, Math.round((progress / 100) * 100));
  
  const circleCircumference = 2 * Math.PI * 90;
  const offset = circleCircumference - (progress / 100) * circleCircumference;

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-900">
      {/* Outer glow effect */}
      <div className="relative w-72 h-72">
        <div className="absolute inset-0 animate-pulse bg-blue-500 rounded-full blur-xl opacity-20"></div>
        
        {/* Main circle container */}
        <div className="relative w-full h-full">
          <svg className="w-full h-full transform -rotate-90">
            {/* Animated background pattern */}
            <defs>
              <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" className="animate-pulse" style={{stopColor: '#1a365d'}} />
                <stop offset="100%" style={{stopColor: '#2563eb'}} />
              </linearGradient>
            </defs>
            
            {/* Background circle with pattern */}
            <circle
              cx="144"
              cy="144"
              r="90"
              className="fill-none stroke-gray-700"
              strokeWidth="12"
            />
            
            {/* Animated progress circle */}
            <circle
              cx="144"
              cy="144"
              r="90"
              className="fill-none stroke-blue-500 transition-all duration-500 ease-out"
              strokeWidth="12"
              strokeDasharray={circleCircumference}
              strokeDashoffset={offset}
              strokeLinecap="round"
            >
              {/* Adding shimmer animation */}
              <animate
                attributeName="stroke-width"
                values="12;14;12"
                dur="2s"
                repeatCount="indefinite"
              />
            </circle>
            
            {/* Rotating dots around the circle */}
            <circle
              cx="144"
              cy="54"
              r="4"
              className="fill-blue-300"
            >
              <animateTransform
                attributeName="transform"
                type="rotate"
                from="0 144 144"
                to="360 144 144"
                dur="2s"
                repeatCount="indefinite"
              />
            </circle>
          </svg>

          {/* Central content with animations */}
          <div className="absolute inset-0 flex flex-col items-center justify-center">
            <div className="relative">
              {/* Animated background for percentage */}
              <div className="absolute inset-0 bg-blue-500 rounded-full blur-md animate-pulse opacity-20"></div>
              
              {/* Percentage display */}
              <span className="relative text-6xl font-bold text-white animate-pulse">
                {percentage}%
              </span>
            </div>
            
            {/* Paragraph counter with fade effect */}
            <span className="mt-2 text-lg text-gray-300 transition-opacity duration-500">
              Paragraph {currentParagraph}/{totalParagraphs}
            </span>
          </div>
        </div>
      </div>

      {/* Animated steps indicator */}
      <div className="mt-8 space-y-3">
        {/* Image generation step */}
        <div className={`flex items-center space-x-3 transition-all duration-300 
          ${step === 'image' ? 'text-blue-400 scale-105' : step === 'audio' || step === 'complete' ? 'text-green-500' : 'text-gray-400'}`}>
          <div className={`w-8 h-8 rounded-full flex items-center justify-center 
            ${step === 'image' ? 'animate-bounce bg-blue-500 bg-opacity-20' : ''}`}>
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          <span>Generating Image</span>
        </div>

        {/* Audio generation step */}
        <div className={`flex items-center space-x-3 transition-all duration-300
          ${step === 'audio' ? 'text-blue-400 scale-105' : step === 'complete' ? 'text-green-500' : 'text-gray-400'}`}>
          <div className={`w-8 h-8 rounded-full flex items-center justify-center
            ${step === 'audio' ? 'animate-bounce bg-blue-500 bg-opacity-20' : ''}`}>
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 001.414 1.414m2.828-9.9a9 9 0 012.828-2.828" />
            </svg>
          </div>
          <span>Generating Audio</span>
        </div>

        {/* Complete step */}
        <div className={`flex items-center space-x-3 transition-all duration-300
          ${step === 'complete' ? 'text-green-400 scale-105' : 'text-gray-400'}`}>
          <div className={`w-8 h-8 rounded-full flex items-center justify-center
            ${step === 'complete' ? 'animate-bounce bg-green-500 bg-opacity-20' : ''}`}>
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <span>Complete</span>
        </div>
      </div>

      {/* Animated message */}
      <div className="mt-6 text-lg">
        <span className="inline-block animate-pulse text-blue-400">{message}</span>
      </div>
    </div>
  );
};

export default AnimatedLoadingWheel;