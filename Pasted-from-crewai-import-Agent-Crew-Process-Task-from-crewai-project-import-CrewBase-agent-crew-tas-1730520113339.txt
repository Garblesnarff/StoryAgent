from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
import yaml
import os

class IdeaCrewService:
    def __init__(self):
        # Load agent and task configurations
        self.agents_config = self._load_config('crews/idea_crew/config/agents.yaml')
        self.tasks_config = self._load_config('crews/idea_crew/config/tasks.yaml')
        
    def _load_config(self, path):
        config_path = os.path.join(os.path.dirname(__file__), path)
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)

    @agent
    def concept_generator(self) -> Agent:
        return Agent(
            config=self.agents_config['concept_generator'],
            verbose=True
        )

    @agent
    def world_builder(self) -> Agent:
        return Agent(
            config=self.agents_config['world_builder'],
            verbose=True
        )

    @agent
    def plot_weaver(self) -> Agent:
        return Agent(
            config=self.agents_config['plot_weaver'],
            verbose=True
        )

    @task
    def generate_core_concepts(self, prompt, genre, mood, target_audience) -> Task:
        task_config = self.tasks_config['generate_core_concepts'].copy()
        task_config['input'] = {
            'prompt': prompt,
            'genre': genre,
            'mood': mood, 
            'target_audience': target_audience
        }
        return Task(config=task_config)

    @task
    def develop_story_world(self, core_concepts) -> Task:
        task_config = self.tasks_config['develop_story_world'].copy()
        task_config['input'] = {'core_concepts': core_concepts}
        return Task(config=task_config)

    @task  
    def craft_plot_possibilities(self, story_world) -> Task:
        task_config = self.tasks_config['craft_plot_possibilities'].copy()
        task_config['input'] = {'story_world': story_world}
        return Task(config=task_config)

    def generate_story_concept(self, prompt, genre, mood, target_audience):
        """Generates a complete story concept using the Idea Crew"""
        crew = Crew(
            agents=[
                self.concept_generator(),
                self.world_builder(),
                self.plot_weaver()
            ],
            tasks=[
                self.generate_core_concepts(prompt, genre, mood, target_audience),
                self.develop_story_world("{{generate_core_concepts.output}}"),
                self.craft_plot_possibilities("{{develop_story_world.output}}")
            ],
            process=Process.sequential,
            verbose=True
        )
        
        result = crew.kickoff()
        return {
            'core_concepts': result['generate_core_concepts'],
            'story_world': result['develop_story_world'],
            'plot_possibilities': result['craft_plot_possibilities']
        }