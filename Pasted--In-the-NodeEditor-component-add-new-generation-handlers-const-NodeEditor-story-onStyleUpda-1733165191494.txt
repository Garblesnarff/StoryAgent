// In the NodeEditor component, add new generation handlers
const NodeEditor = ({ story, onStyleUpdate }) => {
    // ... existing state declarations ...
    
    const handleGenerateImage = useCallback(async (index) => {
        if (!story?.paragraphs?.[index]?.text) {
            console.error('No text found for paragraph');
            return;
        }

        try {
            setNodes(currentNodes => currentNodes.map(node => 
                node.id === `p${index}` ? {...node, data: {...node.data, isGeneratingImage: true}} : node
            ));

            const storyContext = story.paragraphs
                .slice(0, index)
                .map(p => `Text: ${p.text}\n${p.image_prompt ? `Previous Image Prompt: ${p.image_prompt}\n` : ''}`)
                .join('\n\n');

            const response = await fetch('/story/generate_cards', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    index: index,
                    text: story.paragraphs[index].text.trim(),
                    story_context: storyContext,
                    style: selectedStyle,
                    generate_type: 'image'
                })
            });

            // ... handle response and update node state ...
            
        } catch (error) {
            console.error('Error generating image:', error);
            setNodes(currentNodes => currentNodes.map(node => 
                node.id === `p${index}` ? {...node, data: {...node.data, isGeneratingImage: false}} : node
            ));
        }
    }, [story?.paragraphs, selectedStyle, setNodes]);

    const handleGenerateAudio = useCallback(async (index) => {
        if (!story?.paragraphs?.[index]?.text) {
            console.error('No text found for paragraph');
            return;
        }

        try {
            setNodes(currentNodes => currentNodes.map(node => 
                node.id === `p${index}` ? {...node, data: {...node.data, isGeneratingAudio: true}} : node
            ));

            const response = await fetch('/story/generate_cards', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    index: index,
                    text: story.paragraphs[index].text.trim(),
                    generate_type: 'audio'
                })
            });

            // ... handle response and update node state ...
            
        } catch (error) {
            console.error('Error generating audio:', error);
            setNodes(currentNodes => currentNodes.map(node => 
                node.id === `p${index}` ? {...node, data: {...node.data, isGeneratingAudio: false}} : node
            ));
        }
    }, [story?.paragraphs, setNodes]);

    // Modify the node data in useEffect
    useEffect(() => {
        // ... existing node creation code ...
        const paragraphNodes = story.paragraphs.map((para, index) => ({
            // ... other node properties ...
            data: {
                // ... other data properties ...
                onGenerateImage: handleGenerateImage,
                onGenerateAudio: handleGenerateAudio,
                isGeneratingImage: false,
                isGeneratingAudio: false,
                // ... rest of data properties ...
            }
        }));
        setNodes(paragraphNodes);
    }, [story?.paragraphs, selectedStyle, handleGenerateImage, handleGenerateAudio, setNodes]);

    // ... rest of component code ...
};