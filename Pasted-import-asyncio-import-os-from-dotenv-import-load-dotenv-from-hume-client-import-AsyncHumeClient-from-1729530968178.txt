import asyncio
import os
from dotenv import load_dotenv
from hume.client import AsyncHumeClient
from hume.empathic_voice.chat.socket_client import ChatConnectOptions
from hume.empathic_voice.types import UserInput
from hume.core.api_error import ApiError

# Load environment variables
load_dotenv()

HUME_API_KEY = os.getenv("HUME_API_KEY")
HUME_SECRET_KEY = os.getenv("HUME_SECRET_KEY")
HUME_CONFIG_ID = os.getenv("HUME_CONFIG_ID")

async def main():
    try:
        # Initialize the Hume client
        client = AsyncHumeClient(api_key=HUME_API_KEY)
        
        # Set up the WebSocket connection options with the config and secret key
        options = ChatConnectOptions(config_id=HUME_CONFIG_ID, secret_key=HUME_SECRET_KEY)
        
        # Set up an interface to manage the WebSocket connection
        websocket_interface = WebSocketInterface()

        # Connect to EVI's empathic voice API for text-to-speech conversion
        async with client.empathic_voice.chat.connect_with_callbacks(
            options=options,
            on_open=websocket_interface.on_open,
            on_message=websocket_interface.on_message,
            on_close=websocket_interface.on_close,
            on_error=websocket_interface.on_error
        ) as socket:
            
            # Send your story snippet to be converted to speech
            story_snippet = "Your story snippet goes here."
            user_input = UserInput(text=story_snippet)
            await socket.send_user_input(user_input)
    
    except ApiError as e:
        print(f"API error occurred: {e}")

class WebSocketInterface:
    def on_open(self):
        print("WebSocket connection opened.")
    
    def on_message(self, data):
        # Process and handle the received audio file (audio is typically in base64 format)
        print("Received audio data.")
        with open("story_audio.wav", "wb") as audio_file:
            audio_file.write(base64.b64decode(data['audio']))

    def on_close(self):
        print("WebSocket connection closed.")
    
    def on_error(self, error):
        print(f"Error encountered: {error}")

# Run the async main function
asyncio.run(main())
