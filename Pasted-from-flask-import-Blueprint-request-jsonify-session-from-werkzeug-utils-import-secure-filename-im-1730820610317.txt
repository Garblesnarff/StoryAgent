from flask import Blueprint, request, jsonify, session
from werkzeug.utils import secure_filename
import os
import logging
from services.pdf_processor import PDFProcessor
from services.image_generator import ImageGenerator
from services.text_to_speech import HumeAudioGenerator

pdf_bp = Blueprint('pdf', __name__)
pdf_processor = PDFProcessor()
image_generator = ImageGenerator()
audio_generator = HumeAudioGenerator()

ALLOWED_EXTENSIONS = {'pdf'}
UPLOAD_FOLDER = 'uploads'

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@pdf_bp.route('/upload', methods=['POST'])
async def upload_pdf():
    if 'file' not in request.files:
        return jsonify({'error': 'No file provided'}), 400
        
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No file selected'}), 400
        
    if not allowed_file(file.filename):
        return jsonify({'error': 'Invalid file type'}), 400
        
    try:
        # Process PDF and get paragraphs
        paragraphs = await pdf_processor.process_pdf(file)
        
        # Store in session similar to story generation
        session['story_data'] = {
            'type': 'pdf_book',
            'filename': secure_filename(file.filename),
            'paragraphs': [{'text': p, 'image_url': None, 'audio_url': None} for p in paragraphs]
        }
        
        return jsonify({
            'success': True,
            'message': f'Successfully processed {len(paragraphs)} paragraphs',
            'redirect': '/story/edit'  # Reuse existing edit page
        })
        
    except Exception as e:
        logging.error(f"Error processing PDF: {str(e)}")
        return jsonify({'error': str(e)}), 500

@pdf_bp.route('/generate_media', methods=['POST'])
async def generate_media():
    try:
        if 'story_data' not in session:
            return jsonify({'error': 'No PDF data found'}), 404
            
        data = request.get_json()
        paragraph_index = data.get('index')
        
        if paragraph_index is None:
            return jsonify({'error': 'No paragraph index provided'}), 400
            
        story_data = session['story_data']
        paragraph = story_data['paragraphs'][paragraph_index]
        
        def generate():
            try:
                # Generate image
                yield json.dumps({
                    'status': 'generating_image',
                    'message': f'Generating image for paragraph {paragraph_index + 1}'
                }) + '\n'
                
                image_url = image_generator.generate_image(paragraph['text'])
                paragraph['image_url'] = image_url
                
                yield json.dumps({
                    'status': 'image_complete',
                    'data': {'image_url': image_url}
                }) + '\n'
                
                # Generate audio
                yield json.dumps({
                    'status': 'generating_audio',
                    'message': f'Generating audio for paragraph {paragraph_index + 1}'
                }) + '\n'
                
                audio_url = audio_generator.generate_audio(paragraph['text'])
                paragraph['audio_url'] = audio_url
                
                yield json.dumps({
                    'status': 'audio_complete',
                    'data': {'audio_url': audio_url}
                }) + '\n'
                
                # Update session
                session['story_data'] = story_data
                
                yield json.dumps({
                    'status': 'complete',
                    'message': 'Media generation complete'
                }) + '\n'
                
            except Exception as e:
                yield json.dumps({
                    'status': 'error',
                    'message': str(e)
                }) + '\n'
                
        return Response(stream_with_context(generate()), mimetype='text/event-stream')
        
    except Exception as e:
        logging.error(f"Error generating media: {str(e)}")
        return jsonify({'error': str(e)}), 500